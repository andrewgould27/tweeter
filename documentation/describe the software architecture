We choose the Event Driven Design as our design paradigm. When we creating the software architecture of our prototype, we develops the structure and organization of the software and identifies the various components, like how to classify the Tweeter User and how it interact with the other components like Homepage, Signup, Login, Reply, Text, Firebase, Like etc. 
We specifies each component in sufficient detail to facilitate its construction. The blueprint of our design is Peer to peer architecture since the distributed application architecture that partitions tasks are between peers. All user are equally privileged and equipotent participants in the application. User make a portion of their resources, like storage, network bandwidth, processing power. If the user downloads our Github resources, even if we retried it, the app would still work since it isn’t central coordination by servers or stable hosts. As long as another chatter also have our app, there are both suppliers and consumers of resources since their can change their code without violate any rules. The advantage of our architecture is it have great availability, any user can upload and download our original code to their Github account, loss of one user or someone’s files break down doesn’t bring down the entire system. It also has a faster recovery and can be restored on another peer. The prototype we chose is rapid prototyping life cycle model since we have basic idea about what we going to do, our group members as users had interact and experiment the project app after we finished one circle, then we bring up some disadvantage or bugs and we fix it again.  
